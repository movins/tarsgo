package tcpToRpc


import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 请求数据包封装
type RPCInput struct {
	Obj  string            `protobuf:"bytes,1,opt,name=obj" json:"obj,omitempty"`
	Func string            `protobuf:"bytes,2,opt,name=func" json:"func,omitempty"`
	Req  []byte            `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	Opt  map[string]string `protobuf:"bytes,4,rep,name=opt" json:"opt,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RPCInput) Reset()                    { *m = RPCInput{} }
func (m *RPCInput) String() string            { return proto.CompactTextString(m) }
func (*RPCInput) ProtoMessage()               {}
func (*RPCInput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RPCInput) GetObj() string {
	if m != nil {
		return m.Obj
	}
	return ""
}

func (m *RPCInput) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *RPCInput) GetReq() []byte {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *RPCInput) GetOpt() map[string]string {
	if m != nil {
		return m.Opt
	}
	return nil
}

// 返回数据包封装
type RPCOutput struct {
	Ret  int32             `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	Rsp  []byte            `protobuf:"bytes,2,opt,name=rsp,proto3" json:"rsp,omitempty"`
	Opt  map[string]string `protobuf:"bytes,3,rep,name=opt" json:"opt,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Desc string            `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
	Obj  string            `protobuf:"bytes,5,opt,name=obj" json:"obj,omitempty"`
	Func string            `protobuf:"bytes,6,opt,name=func" json:"func,omitempty"`
}

func (m *RPCOutput) Reset()                    { *m = RPCOutput{} }
func (m *RPCOutput) String() string            { return proto.CompactTextString(m) }
func (*RPCOutput) ProtoMessage()               {}
func (*RPCOutput) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RPCOutput) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *RPCOutput) GetRsp() []byte {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *RPCOutput) GetOpt() map[string]string {
	if m != nil {
		return m.Opt
	}
	return nil
}

func (m *RPCOutput) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RPCOutput) GetObj() string {
	if m != nil {
		return m.Obj
	}
	return ""
}

func (m *RPCOutput) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func init() {
	proto.RegisterType((*RPCInput)(nil), "pb.RPCInput")
	proto.RegisterType((*RPCOutput)(nil), "pb.RPCOutput")
}

func init() { proto.RegisterFile("pb/rpcMessage.ext.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcb, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0x49, 0x2f, 0x43, 0x27, 0xba, 0x90, 0xe0, 0x25, 0xb8, 0x2a, 0xb3, 0xb1, 0xab, 0x08,
	0x0a, 0x22, 0x2e, 0x1d, 0x5c, 0xb8, 0x90, 0x96, 0xe0, 0x0b, 0x4c, 0xea, 0x51, 0x70, 0xa4, 0x3d,
	0x26, 0xa9, 0xd8, 0xd7, 0xd1, 0xc7, 0xf1, 0xa5, 0xe4, 0x24, 0x2d, 0x22, 0xee, 0xdc, 0xfd, 0x39,
	0x9c, 0xcb, 0xf7, 0xff, 0xe1, 0x47, 0x68, 0x4e, 0x2d, 0xb6, 0x77, 0xe0, 0xdc, 0xe6, 0x09, 0x14,
	0xbc, 0x7b, 0x85, 0xb6, 0xf7, 0xbd, 0x48, 0xd0, 0xac, 0x3e, 0x19, 0x2f, 0x74, 0xb3, 0xbe, 0xed,
	0x70, 0xf0, 0x62, 0x8f, 0xa7, 0xbd, 0x79, 0x96, 0xac, 0x64, 0xd5, 0x52, 0x93, 0x14, 0x82, 0x67,
	0x8f, 0x43, 0xd7, 0xca, 0x24, 0x94, 0x82, 0xa6, 0x2e, 0x0b, 0xaf, 0x32, 0x2d, 0x59, 0xb5, 0xab,
	0x49, 0x8a, 0x13, 0x9e, 0xf6, 0xe8, 0x65, 0x56, 0xa6, 0xd5, 0xce, 0xd9, 0x81, 0x42, 0xa3, 0xe6,
	0x95, 0xaa, 0x46, 0x7f, 0xd3, 0x79, 0x3b, 0x6a, 0xea, 0x38, 0xbe, 0xe0, 0xc5, 0x5c, 0xa0, 0x35,
	0x5b, 0x18, 0xe7, 0x63, 0x5b, 0x18, 0xc5, 0x3e, 0xcf, 0xdf, 0x36, 0x2f, 0x03, 0x4c, 0xd7, 0xe2,
	0xe3, 0x2a, 0xb9, 0x64, 0xab, 0x2f, 0xc6, 0x97, 0xba, 0x59, 0xd7, 0x83, 0x9f, 0x30, 0x2d, 0xf8,
	0x30, 0x99, 0x13, 0x40, 0xac, 0x38, 0x0c, 0x73, 0x84, 0xe4, 0x50, 0x54, 0x11, 0x29, 0x0d, 0x48,
	0x87, 0x13, 0x52, 0x9c, 0xff, 0xcd, 0x44, 0x16, 0x1f, 0xc0, 0xb5, 0x32, 0x8b, 0x16, 0x49, 0xcf,
	0x41, 0xe4, 0x7f, 0x83, 0x58, 0xfc, 0x04, 0xf1, 0x5f, 0x37, 0xd7, 0xc5, 0x47, 0x92, 0x37, 0xba,
	0xbe, 0xaf, 0xcd, 0x22, 0x7c, 0xc4, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xa5, 0x50,
	0xc1, 0xa3, 0x01, 0x00, 0x00,
}